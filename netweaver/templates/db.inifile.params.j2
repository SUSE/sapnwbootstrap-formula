##################################################################################################################################################################################################
#                                                                                                                                                                                                #
# Installation service 'NW_ABAP_DB:XXX' #
# Used product id: {{ product_id }}
#                                                                                                                                                                                                #
##################################################################################################################################################################################################

{%- set product_id_header = product_id.split(":")[1].split(".")[0] %}

# Password for the Diagnostics Agent specific <dasid>adm user. Provided value may be encoded.
# DiagnosticsAgent.dasidAdmPassword =

# Windows domain in which the Diagnostics Agent users must be created. This is an optional property (Windows only).
# DiagnosticsAgent.domain =

# Windows only: Password for the Diagnostics Agent specific 'SAPService<DASID>' user.
# DiagnosticsAgent.sapServiceDASIDPassword =

# Specify whether Software Provisioning Manager is to drop the schema if it exists.
# HDB_Schema_Check_Dialogs.dropSchema = false

# The name of the database schema.
# For S/4HANA new versions (1809 and beyond), the DB is always named `SAPHANADB`
{% if schema_name in ['SAPABAP1', 'SAPHANADB'] %}
# HDB_Schema_Check_Dialogs.schemaName = {{ schema_name }}
{% else %}
HDB_Schema_Check_Dialogs.schemaName = {{ schema_name }}
{% endif %}

# The password of the database schema.
HDB_Schema_Check_Dialogs.schemaPassword = {{ schema_password }}

# Specify whether Software Provisioning Manager is to validate the schema name. The schema name must only contain numbers and capital letters. It  must not start with '_' . It cannot be 'SYS' or 'SYSTEM'.
# HDB_Schema_Check_Dialogs.validateSchemaName = true

# Use SAP HANA Media on CD, do not ask for SAR archives
{%- if product_id_header in ['S4HANA1809', 'S4HANA1909', 'S4HANA2020', 'S4HANA2021'] %}
HDB_Software_Dialogs.useMediaCD = false
{%- else %}
HDB_Software_Dialogs.useMediaCD = true
{%- endif %}

# Database hostnames that will be set directly in hdbuserstore without resolving them in HANA. Comma separated. Example (host1,host2)
# HDB_Userstore.doNotResolveHostnames =

# Alternative port for SystemDB to be used in hdbuserstore
# HDB_Userstore.systemDBPort =

# Use ABAP secure store instead of HANA userstore. Default: false for HANA user store.
# HDB_Userstore.useABAPSSFS = false

# Specify whether you want to decluster during the import.
# InitDeclusteringForImport.decluster =

# SAP code page. Value for Unicode is: '4103' on little endian (intel), '4102' on big endian. Value for Non-Unicode is: '1100' or country specific.
NW_ABAP_Import_Dialog.dbCodepage = 4103

# Communication port for the Migration Monitor.
# NW_ABAP_Import_Dialog.migmonComPort =

# Communication type for the Migration Monitor. Possible values are: 'EXCHANGE', 'SOCKETS', none
# NW_ABAP_Import_Dialog.migmonComType = EXCHANGE

# Exchange directory for the Migration Monitor
# NW_ABAP_Import_Dialog.migmonExchangeDir =

# Number of parallel Migration Monitor jobs
NW_ABAP_Import_Dialog.migmonJobNum = 12

# Additional 'R3load' arguments for the LOAD phase
NW_ABAP_Import_Dialog.migmonLoadArgs = -c 100000 -rowstorelist /tmp/sapinst_instdir/NW750/HDB/INSTALL/HA/ABAP/DB/rowstorelist.txt

# Additional 'R3load' arguments for the TASK phase
# NW_ABAP_Import_Dialog.migmonTaskArgs =

# Migration key.
# NW_ABAP_Import_Dialog.migrationKey =

# Enables setting advanced 'R3load' options.
# NW_ABAP_Import_Dialog.useAdvancedLoadConfig = false

# Enables setting attribues for parallel export/import.
# NW_ABAP_Import_Dialog.useParallelExportImport = false

# System copy AS Java with product instance Process Integration and/or Development Infrastructure: Specify whether the target system should replace the source system. Possible values are  'true' or 'false'.
# NW_CreateDBandLoad.movePVCforUsagePiAndDi =

# Specify whether the all operating system users are to be removed from group 'sapinst' after the execution of Software Provisioning Manager has completed.
NW_Delete_Sapinst_Users.removeUsers = true

# Master password
NW_GetMasterPassword.masterPwd = {{ master_password }}

# ABAP schema name
# NW_HDB_DB.abapSchemaName =

# Password of the ABAP schema user
# NW_HDB_DB.abapSchemaPassword =

# JAVA schema name
# NW_HDB_DB.javaSchemaName =

# Password of the JAVA schema user
# NW_HDB_DB.javaSchemaPassword =

# Install the SAP HANA database client in a central or local directory. Possible values are: 'SAPCPE', 'LOCAL'
{%- if product_id_header in ['S4HANA1809', 'S4HANA1909', 'S4HANA2020', 'S4HANA2021'] %}
NW_HDB_DBClient.clientPathStrategy = LOCAL
{%- else %}
# NW_HDB_DBClient.clientPathStrategy = LOCAL
{%- endif %}

# Database host
NW_HDB_getDBInfo.dbhost = {{ hana_host }}

# Database system ID
NW_HDB_getDBInfo.dbsid = {{ hana_sid.upper() }}

# The instance number of the SAP HANA database server
NW_HDB_getDBInfo.instanceNumber = {{ '{:0>2}'.format(hana_inst) }}

# Password of user 'SYSTEM' within the 'SystemDB' tenant in an SAP HANA MultiDB server
NW_HDB_getDBInfo.systemDbPassword = {{ hana_password }}

# Password of user 'SYSTEM' inside the SAP HANA database server
NW_HDB_getDBInfo.systemPassword = {{ hana_password }}

# Password of user 'SYSTEM' inside the SAP HANA database server from a backup
# NW_HDB_getDBInfo.systemPasswordBackup =

# SAP HANA system ID
NW_HDB_getDBInfo.systemid = {{ hana_sid.upper() }}

# A dedicated OS group for the tenant database, required for SAP HANA multitenant database containers with high isolation level.
# NW_HDB_getDBInfo.tenantOsGroup =

# A dedicated OS user for the tenant database, required for SAP HANA multitenant database containers with high isolation level.
# NW_HDB_getDBInfo.tenantOsUser =


{%- if product_id_header in ['S4HANA1809', 'S4HANA1909', 'S4HANA2020', 'S4HANA2021'] %}
# S4HANA specific values
NW_Recovery_Install_HDB.extractLocation = /usr/sap/{{ hana_sid.upper() }}/HDB{{ '{:0>2}'.format(hana_inst) }}/backup/data/DB_{{ hana_sid.upper() }}

NW_Recovery_Install_HDB.sidAdmName = {{ hana_sid.lower() }}adm

NW_Recovery_Install_HDB.sidAdmPassword = {{ hana_password }}

# By default, the value matches the number of extract files. Decreased to avoid high memory usage
NW_Recovery_Install_HDB.extractParallelJobs = 5
{%- endif %}

# SAP INTERNAL USE ONLY
# NW_adaptProfile.templateFiles =

# ABAP message server port for connecting to the message server, leave empty for default
# NW_checkMsgServer.abapMSPort =

# The FQDN of the system
# NW_getFQDN.FQDN =

# Specify whether you want to set FQDN for the system.
NW_getFQDN.setFQDN = false

# The load type chosen by the user. Valid values are: 'SAP', 'STD', 'OBR', 'HCP', 'FLASHCOPY', 'MDA', 'HBR', 'SBR'
NW_getLoadType.loadType = SAP

# ABAP system is Unicode (true|false), only needed if it cannot be determined from the system.
# NW_getUnicode.isUnicode =

# Provide  'profile' directory of SAP Netweaver-based system.
NW_readProfileDir.profileDir = {{ sapmnt_path }}/{{ sid.upper() }}/profile/

# Enter the path of the existing 'profile' directory.
# NW_readProfileDir.profilesAvailable = true

# Windows only: The drive to use
# NW_readProfileDir.sapdrive =

# The folder containing all archives that have been downloaded from http://support.sap.com/swdc and are supposed to be used in this procedure
archives.downloadBasket = {{ download_basket }}

# Specify whether a Landscape Reorg Check Procedures file 'HdbLandscapeReorgCheckProcedure.SQL' is to be used. Possible values are 'USEFILE', 'DONOTUSEFILE','DONOTRUN'. Default value is 'USEFILE'.
# On HANA scale-out deployments sapinst will throw an error message about a missing 'HdbLandscapeReorgCheckProcedure.SQL' file, therefore we set this to DONOTUSEFILE.
hanadb.landscape.reorg.useCheckProcedureFile = DONOTUSEFILE

# Specify whether a Table Placement Parameters file 'HdbTablePlacementParameters.SQL' is to be used. Possible values are 'USEFILE', 'DONOTUSEFILE'. Default value is 'USEFILE'.
hanadb.landscape.reorg.useParameterFile = DONOTUSEFILE

# DBACOCKPIT user is to be created. Default value is 'true'.
# hdb.create.dbacockpit.user = true

# Windows only: The domain of the SAP Host Agent user
# hostAgent.domain =

# Password for the 'sapadm' user of the SAP Host Agent
hostAgent.sapAdmPassword = {{ sap_adm_password }}

# Windows only: The domain of all users of this SAP system. Leave empty for default.
# nwUsers.sapDomain =

# Windows only: The password of the 'SAPServiceSID' user
# nwUsers.sapServiceSIDPassword =

# UNIX only: The user ID of the 'sapadm' user, leave empty for default. The ID is ignored if the user already exists.
# nwUsers.sapadmUID =

# UNIX only: The group id of the 'sapsys' group, leave empty for default. The ID is ignored if the group already exists.
nwUsers.sapsysGID =

# UNIX only: The user id of the <sapsid>adm user, leave empty for default. The ID is ignored if the user already exists.
nwUsers.sidAdmUID =

# The password of the '<sapsid>adm' user
nwUsers.sidadmPassword = {{ sid_adm_password }}

# ABAP schema password
# storageBasedCopy.abapSchemaPassword =

# Sets the SAP<SAPSID>DB schema password using a  parameter file.
# storageBasedCopy.javaSchemaPassword =
